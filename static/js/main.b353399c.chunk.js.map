{"version":3,"sources":["index.js","useReducerWithHistory.js"],"names":["gameState","gameContext","createContext","Board","squares","useContext","state","className","Square","boardId","props","dispatch","stepNumber","xIsNext","squaresCopy","onClick","calculateWinner","type","lines","i","length","a","b","c","ReactDOM","render","reducer","history","useRef","useState","index","setIndex","canUndo","canRedo","current","action","newState","slice","push","useReducerWithHistory","Array","fill","undo","redo","reset","useEffect","status","context","winner","complete","Object","values","isArray","includes","isTie","Provider","value","disabled","document","getElementById"],"mappings":"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","file":"static/js/main.b353399c.chunk.js","sourcesContent":["import React, { useEffect, Fragment, createContext, useContext } from 'react';\nimport { FaUndo, FaRedo, FaSync } from \"react-icons/fa\"\nimport useReducerWithHistory from \"./useReducerWithHistory\"\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Initialize a state for the game\nlet gameState = null\n\n// Initialize a context for the game\nconst gameContext = createContext()\n\nfunction Game() {\n  // Create the reducer pattern for the state\n  const [state, dispatch, canUndo, undo, canRedo, redo, reset] = useReducerWithHistory(\n    (state, action) => {\n      switch (action.type) {\n        case \"SQUARE_CLICKED\":\n          return { ...state, squares: action.squares, stepNumber: action.stepNumber, xIsNext: action.xIsNext }\n        default:\n          return { ...state }\n      }\n    },\n    gameState || {\n      squares: Array(9).fill(null),\n      stepNumber: 0,\n      xIsNext: false,\n    }\n  )\n\n  // Grab the neccesary values from the state\n  const { squares, xIsNext } = state\n\n  // Effect to synchronize the gameState variable\n  useEffect(() => {\n    gameState = state\n  })\n\n  // Define the context object\n  const context = {state, dispatch}\n\n  // Calculate the winner\n  const winner = calculateWinner(squares)\n\n  // Calculate the status\n  let status;\n  let complete = false;\n  if (winner) {\n    status = 'Winner: ' + winner\n    complete = true\n  } else if (isTie(squares)) {\n    status = \"Tie!\"\n    complete = true\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O')\n  }\n\n  // Provide that state as context for the Board\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <h1>Tic-Tac-Toe</h1>\n        <gameContext.Provider value={context}>\n          <Board />\n        </gameContext.Provider>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          {complete ? <button onClick={reset}>Reset <FaSync/></button> \n          : <Fragment>\n              <button onClick={undo} disabled={!canUndo()}>Undo <FaUndo/></button>\n              <button onClick={redo} disabled={!canRedo()}>Redo <FaRedo/></button>\n            </Fragment>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Board() {\n  // Inherit state from context\n  const {state} = useContext(gameContext)\n\n  // Grab the squares from the state\n  const { squares } = state\n  \n  // Provide values and IDs for the squares\n  return (\n    <Fragment>\n     { squares && (\n      <Fragment>\n        <div className=\"board-row\">\n          <Square boardId={0}>{squares[0]}</Square>\n          <Square boardId={1}>{squares[1]}</Square>\n          <Square boardId={2}>{squares[2]}</Square>\n        </div>\n        <div className=\"board-row\">\n          <Square boardId={3}>{squares[3]}</Square>\n          <Square boardId={4}>{squares[4]}</Square>\n          <Square boardId={5}>{squares[5]}</Square>\n        </div>\n        <div className=\"board-row\">\n          <Square boardId={6}>{squares[6]}</Square>\n          <Square boardId={7}>{squares[7]}</Square>\n          <Square boardId={8}>{squares[8]}</Square>\n        </div>\n      </Fragment>)} \n    </Fragment>\n    \n  )\n}\n\nfunction Square(props) {\n  // Inherit state and dispatch from context\n  const { state, dispatch } = useContext(gameContext)\n\n  // Grab the neccesary values from the state\n  const { squares, stepNumber, xIsNext } = state\n\n  let squaresCopy = {...squares}\n  let stepNumberCopy = stepNumber\n  let xIsNextCopy = xIsNext\n\n  // Function to handle all square clicks\n  const handleClick = () => {\n    // If nobody has won, and the square is not already set,\n    if (!calculateWinner(squares) && !squares[props.boardId]) {\n      // Update the state\n      squaresCopy[props.boardId] = xIsNext ? 'X' : 'O'\n      stepNumberCopy = stepNumber + 1\n      xIsNextCopy = !xIsNext\n\n      // Dispatch the new state.\n      dispatch({ type: 'SQUARE_CLICKED', squares: squaresCopy, stepNumber: stepNumberCopy, xIsNext: xIsNextCopy })\n    }\n  }\n\n  // Render a button with the passed in properties,\n  // Overriding only onClick and className\n  return (\n    <button {...props} onClick={handleClick} className=\"square\" />\n  )\n}\n\n// Helper function for determining a winner\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// Helper function to determine if the game is a tie.\nfunction isTie(squares) {\n  // Convert the squares to an array if it is an object\n  if (squares instanceof Object) {\n    squares = Object.values(squares)\n  }\n\n  // If squares is an array, check if it is full\n  if (Array.isArray(squares)) {\n    return !squares.includes(null)\n  }\n\n  // Unknown type\n  return false\n}\n\n// The final render call\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);","import { useRef, useState } from 'react';\n\n// Custom hook for adding history functions to a reducer pattern.\nexport default function useReducerWithHistory(reducer, state) {\n    // Use a reference for persistent history\n    const history = useRef([state])\n  \n    // Set some state for the current index\n    const [index, setIndex] = useState(0)\n  \n    // Function to determin if undo is possible\n    function canUndo() {\n      return (index > 0)\n    }\n  \n    // Function to rewind index by 1\n    function undo() {\n      setIndex(canUndo() ? index - 1 : index)\n    }\n  \n    // Function to determine if redo is possible\n    function canRedo() {\n      return (index < history.current.length - 1)\n    }\n  \n    // Function to increase index by 1\n    function redo() {\n      setIndex(canRedo() ? index + 1 : index)\n    }\n  \n    // Dispatcher that preserves history when calling the reducer\n    function dispatch(action) {\n      const newState = reducer(history.current[index], action)\n      history.current = history.current.slice(0, index + 1)\n      history.current.push(newState)\n      setIndex(history.current.length - 1)\n    }\n\n    // Function to reset the history to the start\n    function reset() {\n      history.current = history.current.slice(0, 1)\n      setIndex(0)\n    }\n  \n    // Return the current state, and the new functions\n    return [history.current[index], dispatch, canUndo, undo, canRedo, redo, reset]\n  }"],"sourceRoot":""}