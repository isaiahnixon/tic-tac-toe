{"version":3,"sources":["index.js","useReducerWithHistory.js"],"names":["gameState","gameContext","createContext","Board","squares","useContext","state","react_default","a","createElement","react","className","Square","boardId","props","_useContext2","dispatch","stepNumber","xIsNext","squaresCopy","Object","objectSpread","assign","onClick","calculateWinner","type","lines","i","length","_lines$i","slicedToArray","b","c","ReactDOM","render","_useReducerWithHistor","reducer","history","useRef","_useState","useState","_useState2","index","setIndex","canUndo","canRedo","current","action","newState","slice","push","useReducerWithHistory","Array","fill","_useReducerWithHistor2","undo","redo","reset","useEffect","status","context","winner","complete","values","isArray","includes","isTie","Provider","value","index_esm","disabled","document","getElementById"],"mappings":"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","file":"static/js/main.6aaa02ef.chunk.js","sourcesContent":["import React, { useEffect, Fragment, createContext, useContext } from 'react';\r\nimport { FaUndo, FaRedo, FaSync } from \"react-icons/fa\"\r\nimport useReducerWithHistory from \"./useReducerWithHistory\"\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Initialize a state for the game\r\nlet gameState = null\r\n\r\n// Initialize a context for the game\r\nconst gameContext = createContext()\r\n\r\nfunction Game() {\r\n  // Create the reducer pattern for the state\r\n  const [state, dispatch, canUndo, undo, canRedo, redo, reset] = useReducerWithHistory(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case \"SQUARE_CLICKED\":\r\n          return { ...state, squares: action.squares, stepNumber: action.stepNumber, xIsNext: action.xIsNext }\r\n        default:\r\n          return { ...state }\r\n      }\r\n    },\r\n    gameState || {\r\n      squares: Array(9).fill(null),\r\n      stepNumber: 0,\r\n      xIsNext: false,\r\n    }\r\n  )\r\n\r\n  // Grab the neccesary values from the state\r\n  const { squares, xIsNext } = state\r\n\r\n  // Effect to synchronize the gameState variable\r\n  useEffect(() => {\r\n    gameState = state\r\n  })\r\n\r\n  // Define the context object\r\n  const context = {state, dispatch}\r\n\r\n  // Calculate the winner\r\n  const winner = calculateWinner(squares)\r\n\r\n  // Calculate the status\r\n  let status;\r\n  let complete = false;\r\n  if (winner) {\r\n    status = 'Winner: ' + winner\r\n    complete = true\r\n  } else if (isTie(squares)) {\r\n    status = \"Tie!\"\r\n    complete = true\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O')\r\n  }\r\n\r\n  // Provide that state as context for the Board\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <h1>Tic-Tac-Toe</h1>\r\n        <gameContext.Provider value={context}>\r\n          <Board />\r\n        </gameContext.Provider>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          {complete ? <button onClick={reset}>Reset <FaSync/></button> \r\n          : <Fragment>\r\n              <button onClick={undo} disabled={!canUndo()}>Undo <FaUndo/></button>\r\n              <button onClick={redo} disabled={!canRedo()}>Redo <FaRedo/></button>\r\n            </Fragment>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Board() {\r\n  // Inherit state from context\r\n  const {state} = useContext(gameContext)\r\n\r\n  // Grab the squares from the state\r\n  const { squares } = state\r\n  \r\n  // Provide values and IDs for the squares\r\n  return (\r\n    <Fragment>\r\n     { squares && (\r\n      <Fragment>\r\n        <div className=\"board-row\">\r\n          <Square boardId={0}>{squares[0]}</Square>\r\n          <Square boardId={1}>{squares[1]}</Square>\r\n          <Square boardId={2}>{squares[2]}</Square>\r\n        </div>\r\n        <div className=\"board-row\">\r\n          <Square boardId={3}>{squares[3]}</Square>\r\n          <Square boardId={4}>{squares[4]}</Square>\r\n          <Square boardId={5}>{squares[5]}</Square>\r\n        </div>\r\n        <div className=\"board-row\">\r\n          <Square boardId={6}>{squares[6]}</Square>\r\n          <Square boardId={7}>{squares[7]}</Square>\r\n          <Square boardId={8}>{squares[8]}</Square>\r\n        </div>\r\n      </Fragment>)} \r\n    </Fragment>\r\n    \r\n  )\r\n}\r\n\r\nfunction Square(props) {\r\n  // Inherit state and dispatch from context\r\n  const { state, dispatch } = useContext(gameContext)\r\n\r\n  // Grab the neccesary values from the state\r\n  const { squares, stepNumber, xIsNext } = state\r\n\r\n  let squaresCopy = {...squares}\r\n  let stepNumberCopy = stepNumber\r\n  let xIsNextCopy = xIsNext\r\n\r\n  // Function to handle all square clicks\r\n  const handleClick = () => {\r\n    // If nobody has won, and the square is not already set,\r\n    if (!calculateWinner(squares) && !squares[props.boardId]) {\r\n      // Update the state\r\n      squaresCopy[props.boardId] = xIsNext ? 'X' : 'O'\r\n      stepNumberCopy = stepNumber + 1\r\n      xIsNextCopy = !xIsNext\r\n\r\n      // Dispatch the new state.\r\n      dispatch({ type: 'SQUARE_CLICKED', squares: squaresCopy, stepNumber: stepNumberCopy, xIsNext: xIsNextCopy })\r\n    }\r\n  }\r\n\r\n  // Render a button with the passed in properties,\r\n  // Overriding only onClick and className\r\n  return (\r\n    <button {...props} onClick={handleClick} className=\"square\" />\r\n  )\r\n}\r\n\r\n// Helper function for determining a winner\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// Helper function to determine if the game is a tie.\r\nfunction isTie(squares) {\r\n  // Convert the squares to an array if it is an object\r\n  if (squares instanceof Object) {\r\n    squares = Object.values(squares)\r\n  }\r\n\r\n  // If squares is an array, check if it is full\r\n  if (Array.isArray(squares)) {\r\n    return !squares.includes(null)\r\n  }\r\n\r\n  // Unknown type\r\n  return false\r\n}\r\n\r\n// The final render call\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);","import { useRef, useState } from 'react';\r\n\r\n// Custom hook for adding history functions to a reducer pattern.\r\nexport default function useReducerWithHistory(reducer, state) {\r\n    // Use a reference for persistent history\r\n    const history = useRef([state])\r\n  \r\n    // Set some state for the current index\r\n    const [index, setIndex] = useState(0)\r\n  \r\n    // Function to determin if undo is possible\r\n    function canUndo() {\r\n      return (index > 0)\r\n    }\r\n  \r\n    // Function to rewind index by 1\r\n    function undo() {\r\n      setIndex(canUndo() ? index - 1 : index)\r\n    }\r\n  \r\n    // Function to determine if redo is possible\r\n    function canRedo() {\r\n      return (index < history.current.length - 1)\r\n    }\r\n  \r\n    // Function to increase index by 1\r\n    function redo() {\r\n      setIndex(canRedo() ? index + 1 : index)\r\n    }\r\n  \r\n    // Dispatcher that preserves history when calling the reducer\r\n    function dispatch(action) {\r\n      const newState = reducer(history.current[index], action)\r\n      history.current = history.current.slice(0, index + 1)\r\n      history.current.push(newState)\r\n      setIndex(history.current.length - 1)\r\n    }\r\n\r\n    // Function to reset the history to the start\r\n    function reset() {\r\n      history.current = history.current.slice(0, 1)\r\n      setIndex(0)\r\n    }\r\n  \r\n    // Return the current state, and the new functions\r\n    return [history.current[index], dispatch, canUndo, undo, canRedo, redo, reset]\r\n  }"],"sourceRoot":""}